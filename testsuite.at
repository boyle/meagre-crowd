 # Meagre-Crowd: A sparse distributed matrix solver testbench for performance benchmarking.
 # Copyright (C) 2010 Alistair Boyle <alistair.js.boyle@gmail.com>
 #
 #     This file is part of Meagre-Crowd.
 #
 #     Meagre-Crowd program is free software: you can redistribute it and/or modify
 #     it under the terms of the GNU Lesser General Public License as published by
 #     the Free Software Foundation, either version 3 of the License, or
 #     (at your option) any later version.
 #
 #     This program is distributed in the hope that it will be useful,
 #     but WITHOUT ANY WARRANTY; without even the implied warranty of
 #     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #     GNU Lesser General Public License for more details.
 #
 #     You should have received a copy of the GNU Lesser General Public License
 #     along with this program.  If not, see <http://www.gnu.org/licenses/>.

AT_INIT()
AT_COPYRIGHT([Copyright (C) 2010, Alistair Boyle])
AT_COLOR_TESTS

AT_TESTED(AT_PACKAGE_NAME)

m4_define(MC_DATA_FILE_TEST_MM,[AT_DATA([test.mm],]m4_include(tests/test.mm)[)])
m4_define(MC_DATA_FILE_TEST_RB,[AT_DATA([test.rb],]m4_include(tests/test.rb)[)])
m4_define(MC_DATA_FILE_TEST_HB,[AT_DATA([test.hb],]m4_include(tests/test.hb)[)])
m4_define(MC_DATA_FILE_TEST_MAT,[AT_DATA([test.mat],]m4_include(tests/test.mat)[)])

AT_BANNER([hello-world])
AT_SETUP([mpi default: 1 node])
AT_KEYWORDS([mpi hello])
AT_CHECK([helloworld-mpi],0,[Hello world from process 0 of 1
])
AT_CLEANUP

AT_SETUP([mpi: 1 node])
AT_KEYWORDS([mpi hello])
AT_CHECK([mpirun -n 1 helloworld-mpi],0,[Hello world from process 0 of 1
])
AT_CLEANUP

AT_SETUP([mpi: 2 nodes])
AT_KEYWORDS([mpi hello])
AT_CHECK([mpirun -n 2 helloworld-mpi],0,ignore)
AT_CLEANUP


AT_SETUP([mpi: 3 nodes])
AT_KEYWORDS([mpi hello])
AT_CHECK([mpirun -n 3 helloworld-mpi],0,ignore)
AT_CLEANUP

AT_SETUP([mpi: 4 nodes])
AT_KEYWORDS([mpi hello])
AT_CHECK([mpirun -n 4 helloworld-mpi],0,ignore)
AT_CLEANUP


AT_SETUP([mumps])
AT_KEYWORDS([mumps hello])
AT_CHECK([mpirun -n 4 helloworld-mumps],0,[Solution is ( 1.00; 2.00 ): PASS
])
AT_CLEANUP

AT_SETUP([umfpack])
AT_KEYWORDS([umfpack hello])
AT_CHECK([hello-umfpack],0,[[x [0] = 1
x [1] = 2
x [2] = 3
x [3] = 4
x [4] = 5
PASS
]])
AT_CLEANUP

AT_SETUP([matrix-market files])
AT_KEYWORDS([file hello])
MC_DATA_FILE_TEST_RB
MC_DATA_FILE_TEST_HB
MC_DATA_FILE_TEST_MM
AT_CHECK([file],0,[harwell-boeing
rutherford-boeing
matrix market
PASS
])
AT_CLEANUP

AT_SETUP([file-based mumps])
AT_KEYWORDS([mumps-file hello])
MC_DATA_FILE_TEST_MM
AT_CHECK(mpirun -n 4 mumps-file,0,ignore)
AT_CLEANUP

AT_BANNER([help])

m4_define([MC_CHECK_HELP_NOCRASH],[
AT_SETUP([$1])
AT_KEYWORDS([help])
AT_CHECK(AT_PACKAGE_NAME[ $1],,ignore)
AT_CLEANUP
])

m4_define([MC_CHECK_HELP_VER],[
AT_SETUP([$1])
AT_KEYWORDS([help])
AT_CHECK(AT_PACKAGE_NAME[ $1],,AT_PACKAGE_NAME[ ]AT_PACKAGE_VERSION[
])
AT_CLEANUP
])


AT_SETUP([empty command-line])
AT_KEYWORDS([help])
AT_CHECK(AT_PACKAGE_NAME,1,,ignore)
AT_CLEANUP
MC_CHECK_HELP_NOCRASH([--help])
MC_CHECK_HELP_NOCRASH([-h])
MC_CHECK_HELP_NOCRASH([-?])
MC_CHECK_HELP_VER([-V])
MC_CHECK_HELP_VER([--version])



m4_define([MC_UNIT_TEST],[
AT_SETUP([$1])
AT_KEYWORDS([unit])
AT_CHECK([unit-$1],,ignore)
AT_CLEANUP
])


AT_BANNER([unit tests])
MC_UNIT_TEST([perftimer])



AT_BANNER([functional tests])
# test the file input
AT_SETUP([-i <none>])
AT_KEYWORDS([func])
AT_CHECK(AT_PACKAGE_NAME -i,64,,ignore)
AT_CLEANUP
AT_SETUP([-i bad])
AT_KEYWORDS([func])
AT_CHECK(AT_PACKAGE_NAME -i bad,1,,[input error: No such file or directory
])
AT_CLEANUP
AT_SETUP([-i broken.mm])
AT_DATA([broken.mm],[ Jibberish file
not even the right format
])
AT_KEYWORDS([func])
# TODO clean up the garbage left by read_matrix_market_sparse when it fails (turn it off somehow?)
AT_CHECK(AT_PACKAGE_NAME -i broken.mm,1,,[*** read_matrix_market_sparse: Could not process MatrixMarket banner ***
*** load_sparse_matrix: Failed to read MatrixMarket format sparse matrix from file "broken.mm", error code 14 ***
input error: Failed to load matrix
])
AT_CLEANUP

AT_SETUP([-i test.mm])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_MM
AT_CHECK(AT_PACKAGE_NAME -i test.mm,0,ignore)
AT_CLEANUP

AT_SETUP([--input=test.mm])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_MM
AT_CHECK(AT_PACKAGE_NAME --input=test.mm,0,ignore)
AT_CLEANUP


AT_SETUP([-i test.rb])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_RB
AT_CHECK(AT_PACKAGE_NAME -i test.rb,1,,[input error: Sorry Rutherford-Boeing reader is broken
])
AT_CLEANUP

AT_SETUP([-i test.hb])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_HB
AT_CHECK(AT_PACKAGE_NAME -i test.hb,1,,[input error: Sorry Harwell-Boeing reader is broken
])
AT_CLEANUP

AT_SETUP([-i test.mat])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_MAT
AT_CHECK(AT_PACKAGE_NAME -i test.mat,1,,[input error: Sorry Matlab reader is broken
])
AT_CLEANUP


m4_define([MC_ARGS_STAGE2],[
AT_SETUP([$1])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_MM
AT_CHECK(AT_PACKAGE_NAME[ --input=test.mm $1],,ignore)
AT_CLEANUP
])

MC_ARGS_STAGE2([--verbose])
MC_ARGS_STAGE2([-v])
MC_ARGS_STAGE2([-v -v])
MC_ARGS_STAGE2([-vv])
MC_ARGS_STAGE2([-vvv])
MC_ARGS_STAGE2([-vvvv])

MC_ARGS_STAGE2([--timing])
MC_ARGS_STAGE2([-t])
MC_ARGS_STAGE2([-t -t])
MC_ARGS_STAGE2([-tt])
MC_ARGS_STAGE2([-ttt])
MC_ARGS_STAGE2([-tttt])
