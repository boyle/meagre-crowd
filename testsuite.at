 # Meagre-Crowd: A sparse distributed matrix solver testbench for performance benchmarking.
 # Copyright (C) 2010 Alistair Boyle <alistair.js.boyle@gmail.com>
 #
 #     This file is part of Meagre-Crowd.
 #
 #     Meagre-Crowd program is free software: you can redistribute it and/or modify
 #     it under the terms of the GNU Lesser General Public License as published by
 #     the Free Software Foundation, either version 3 of the License, or
 #     (at your option) any later version.
 #
 #     This program is distributed in the hope that it will be useful,
 #     but WITHOUT ANY WARRANTY; without even the implied warranty of
 #     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #     GNU Lesser General Public License for more details.
 #
 #     You should have received a copy of the GNU Lesser General Public License
 #     along with this program.  If not, see <http://www.gnu.org/licenses/>.

AT_INIT()
AT_COPYRIGHT([Copyright (C) 2010, Alistair Boyle])
AT_COLOR_TESTS

AT_TESTED(AT_PACKAGE_NAME)

m4_define(MC_DATA_FILE_TEST_MM,[AT_DATA([unsym.mm],]m4_include(tests/unsym.mm)[)])
m4_define(MC_DATA_FILE_TEST_RB,[AT_DATA([test.rb],]m4_include(tests/test.rb)[)])
m4_define(MC_DATA_FILE_TEST_HB,[AT_DATA([test.hb],]m4_include(tests/test.hb)[)])
m4_define(MC_DATA_FILE_TEST_MAT,[AT_DATA([test.mat],]m4_include(tests/test.mat)[)])
m4_define(MC_DATA_FILE_TEST_MM_SYM,[AT_DATA([sym.mm],]m4_include(tests/sym.mm)[)])
m4_define(MC_DATA_FILE_TEST_MM_SYM_POSDEF,[AT_DATA([sym_posdef.mm],]m4_include(tests/sym_posdef.mm)[)])

m4_define(MC_DATA_FILE_RHS1_MM,[AT_DATA([rhs1.mm],]m4_include(tests/rhs1.mm)[)])
m4_define(MC_DATA_FILE_ANS1_MM,[AT_DATA([unsym-default-ans.mm],]m4_include(tests/unsym-default-ans.mm)[)])
m4_define(MC_DATA_FILE_ANS2_MM,[AT_DATA([unsym-rhs1-ans.mm],]m4_include(tests/unsym-rhs1-ans.mm)[)])
m4_define(MC_DATA_FILE_ANS1_MM_SYM,[AT_DATA([sym-default-ans.mm],]m4_include(tests/sym-default-ans.mm)[)])
m4_define(MC_DATA_FILE_ANS2_MM_SYM,[AT_DATA([sym-rhs1-ans.mm],]m4_include(tests/sym-rhs1-ans.mm)[)])
m4_define(MC_DATA_FILE_ANS1_MM_SYM_POSDEF,[AT_DATA([sym_posdef-default-ans.mm],]m4_include(tests/sym_posdef-default-ans.mm)[)])
m4_define(MC_DATA_FILE_ANS2_MM_SYM_POSDEF,[AT_DATA([sym_posdef-rhs1-ans.mm],]m4_include(tests/sym_posdef-rhs1-ans.mm)[)])

AT_BANNER([hello-world])
AT_SETUP([mpi default: 1 node])
AT_KEYWORDS([mpi hello])
AT_CHECK([helloworld-mpi],0,[Hello world from process 0 of 1
])
AT_CLEANUP

AT_SETUP([mpi: 1 node])
AT_KEYWORDS([mpi hello])
AT_CHECK([mpirun -n 1 helloworld-mpi],0,[Hello world from process 0 of 1
])
AT_CLEANUP

AT_SETUP([mpi: 2 nodes])
AT_KEYWORDS([mpi hello])
AT_CHECK([mpirun -n 2 helloworld-mpi],0,ignore)
AT_CLEANUP


AT_SETUP([mpi: 3 nodes])
AT_KEYWORDS([mpi hello])
AT_CHECK([mpirun -n 3 helloworld-mpi],0,ignore)
AT_CLEANUP

AT_SETUP([mpi: 4 nodes])
AT_KEYWORDS([mpi hello])
AT_CHECK([mpirun -n 4 helloworld-mpi],0,ignore)
AT_CLEANUP


AT_SETUP([mumps])
AT_KEYWORDS([mumps hello])
AT_SKIP_IF([test "x$have_mumps" != "xyes"])
AT_CHECK([mpirun -n 4 helloworld-mumps],0,[Solution is ( 1.00; 2.00 ): PASS
])
AT_CLEANUP

AT_SETUP([umfpack])
AT_KEYWORDS([umfpack hello])
AT_SKIP_IF([test "x$have_umfpack" != "xyes"])
AT_CHECK([hello-umfpack],0,[[x [0] = 1
x [1] = 2
x [2] = 3
x [3] = 4
x [4] = 5
PASS
]])
AT_CLEANUP

AT_SETUP([pardiso])
AT_KEYWORDS([pardiso hello])
AT_SKIP_IF([test "x$have_pardiso" != "xyes"])
AT_CHECK([OMP_NUM_THREADS=1 hello-pardiso  | tail -8],0,[[ x [0] =  0.142857
 x [1] =  0.500000
 x [2] = -1.338095
 x [3] =  0.142857
 x [4] = -0.831818
 x [5] =  0.238095
 x [6] = -0.327273
 x [7] =  1.157143
]])
AT_CLEANUP

AT_SETUP([wsmp])
AT_KEYWORDS([wsmp hello])
AT_SKIP_IF([test "x$have_wsmp" != "xyes"])
AT_CHECK([WSMPLICPATH=~ helloworld-wsmp],0,[],ignore)
AT_CLEANUP

AT_SETUP([matrix-market files])
AT_KEYWORDS([file hello])
MC_DATA_FILE_TEST_RB
MC_DATA_FILE_TEST_HB
MC_DATA_FILE_TEST_MM
AT_CHECK([file],0,[harwell-boeing
rutherford-boeing
matrix market
PASS
])
AT_CLEANUP

AT_SETUP([file-based mumps])
AT_KEYWORDS([mumps-file hello])
MC_DATA_FILE_TEST_MM
AT_SKIP_IF([test "x$have_mumps" != "xyes"])
AT_CHECK(mpirun -n 4 mumps-file,0,ignore)
AT_CLEANUP



m4_define([MC_UNIT_TEST],[
AT_SETUP([$1])
AT_KEYWORDS([unit])
AT_CHECK([unit-$1],,ignore)
AT_CLEANUP
])


AT_BANNER([unit tests])
MC_UNIT_TEST([perftimer])
MC_UNIT_TEST([matrix])



AT_BANNER([functional tests])



AT_SETUP([help/usage])
AT_KEYWORDS([help])
AT_CHECK(AT_PACKAGE_NAME,1,,ignore)
AT_CHECK(AT_PACKAGE_NAME --help,0,ignore)
AT_CHECK(AT_PACKAGE_NAME -h,0,ignore)
AT_CHECK(AT_PACKAGE_NAME -?,0,ignore)
AT_CLEANUP


AT_SETUP(--version)
AT_KEYWORDS([version])
AT_CHECK(AT_PACKAGE_NAME --version,,AT_PACKAGE_NAME[ ]AT_PACKAGE_VERSION[
])
AT_CHECK(AT_PACKAGE_NAME -V,,AT_PACKAGE_NAME[ ]AT_PACKAGE_VERSION[
])
AT_CLEANUP

AT_SETUP(--list-solvers)
AT_KEYWORDS([version])
AT_CHECK(AT_PACKAGE_NAME --list-solvers,0,ignore)
AT_CHECK(AT_PACKAGE_NAME -v --list-solvers,0,ignore)
AT_CHECK(AT_PACKAGE_NAME -vv --list-solvers,0,ignore)
AT_CHECK(AT_PACKAGE_NAME -vvv --list-solvers,0,ignore)
AT_CHECK(AT_PACKAGE_NAME --list-solvers -v,0,ignore)
AT_CHECK(AT_PACKAGE_NAME --list-solvers -vv,0,ignore)
AT_CHECK(AT_PACKAGE_NAME --list-solvers -vvv,0,ignore)
AT_CLEANUP


AT_SETUP([--input])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_MM
AT_CHECK(AT_PACKAGE_NAME --input=unsym.mm,0,)
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm,0,)
AT_CHECK(AT_PACKAGE_NAME --input,64,,ignore)
AT_CHECK(AT_PACKAGE_NAME -i,64,,ignore)
# TODO support stdin
AT_CHECK(AT_PACKAGE_NAME -i -,1,,[input error: No such file or directory
])
AT_CHECK(AT_PACKAGE_NAME -i bad,1,,[input error: No such file or directory
])
AT_DATA([broken.mm],[ Jibberish file
not even the right format
])
# TODO clean up the garbage left by read_matrix_market_sparse when it fails (turn it off somehow?)
AT_CHECK(AT_PACKAGE_NAME -i broken.mm,1,,[input error: Failed to load matrix
])
AT_CLEANUP


AT_SETUP([--output])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_MM
AT_CHECK(AT_PACKAGE_NAME --input=unsym.mm --output=test2.mm,0,)
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -o test3.mm,0,)
AT_CHECK(AT_PACKAGE_NAME --input=unsym.mm --output,64,,ignore)
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -o,64,,ignore)
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -o -,0,[  x(0)=1.00
  x(1)=0.43
  x(2)=0.25
  x(3)=-0.09
  x(4)=0.25
])
AT_CLEANUP

AT_SETUP([--right-hand-side])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_MM
MC_DATA_FILE_RHS1_MM
AT_CHECK(AT_PACKAGE_NAME --input=unsym.mm --right-hand-side=rhs1.mm,0,)
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -b rhs1.mm,0,)
AT_CHECK(AT_PACKAGE_NAME --input=unsym.mm --right-hand-side,64,,ignore)
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -b,64,,ignore)
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -b rhs1.mm -o -,0,[  x(0)=1.00
  x(1)=-0.04
  x(2)=0.25
  x(3)=-0.36
  x(4)=0.25
])
dnl Note that rhs1.mm is different from the default generated right-hand-side so we can see did actually load the file
AT_CLEANUP


AT_SETUP([--expected-answer, --precision])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_MM
MC_DATA_FILE_RHS1_MM
MC_DATA_FILE_ANS1_MM
MC_DATA_FILE_ANS2_MM
dnl check option exists
AT_CHECK(AT_PACKAGE_NAME --input=unsym.mm --expected-answer=unsym-default-ans.mm --precision=5e-3,0,[PASS
])
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -e unsym-default-ans.mm -p 5e-3,0,[PASS
])
dnl check option fails when precision is too high, but default will pass
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -e unsym-default-ans.mm -p 0,100,[FAIL
])
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -e unsym-default-ans.mm,0,[PASS
])
dnl checks that missing arguments are caught
AT_CHECK(AT_PACKAGE_NAME --input=unsym.mm --expected-answer,64,,ignore)
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -e,64,,ignore)
AT_CHECK(AT_PACKAGE_NAME --input=unsym.mm --precision,64,,ignore)
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -p,64,,ignore)
dnl check if wrong answer is put in it fails, if proper rhs is used, answer matches
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -e unsym-rhs1-ans.mm,100,[FAIL
])
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -b rhs1.mm -e unsym-rhs1-ans.mm,0,[PASS
])
dnl precision is non-negative
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -b rhs1.mm -e unsym-rhs1-ans.mm -p 0.1,0,[PASS
])
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -b rhs1.mm -e unsym-rhs1-ans.mm -p -0.1,1,,[precision must be non-negative
])
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm -b rhs1.mm -e unsym-rhs1-ans.mm -p abcd,1,,[bad precision (non-floating point number)
])
AT_CLEANUP



AT_SETUP([--input formats])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_MM
AT_CHECK(AT_PACKAGE_NAME -i unsym.mm,0,ignore)
MC_DATA_FILE_TEST_RB
dnl AT_CHECK(AT_PACKAGE_NAME -i test.rb,1,,[input error: Sorry Rutherford-Boeing reader is broken
dnl ])
AT_CHECK(AT_PACKAGE_NAME -i test.rb,1,,[input error: Failed to load matrix
])
MC_DATA_FILE_TEST_HB
dnl AT_CHECK(AT_PACKAGE_NAME -i test.hb,1,,[input error: Sorry Harwell-Boeing reader is broken
dnl ])
AT_CHECK(AT_PACKAGE_NAME -i test.rb,1,,[input error: Failed to load matrix
])
MC_DATA_FILE_TEST_MAT
dnl AT_CHECK(AT_PACKAGE_NAME -i test.mat,1,,[input error: Sorry Matlab reader is broken
dnl ])
AT_CHECK(AT_PACKAGE_NAME -i test.rb,1,,[input error: Failed to load matrix
])
AT_CLEANUP


m4_define([MC_ARGS_STAGE2],[
AT_SETUP([--$1])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_MM
AT_CHECK(AT_PACKAGE_NAME[ --input=unsym.mm --$1],0,ignore)
AT_CHECK(AT_PACKAGE_NAME[ --input=unsym.mm -$2],0,ignore)
AT_CHECK(AT_PACKAGE_NAME[ --input=unsym.mm -$2 -$2],0,ignore)
AT_CHECK(AT_PACKAGE_NAME[ --input=unsym.mm -$2$2],0,ignore)
AT_CHECK(AT_PACKAGE_NAME[ --input=unsym.mm -$2$2$2],0,ignore)
AT_CHECK(AT_PACKAGE_NAME[ --input=unsym.mm -$2$2$2],0,ignore)
AT_CHECK(AT_PACKAGE_NAME[ --input=unsym.mm -$2$2$2$2],0,ignore)
AT_CLEANUP
])

MC_ARGS_STAGE2([verbose],[v])
MC_ARGS_STAGE2([timing],[t])


m4_define([MC_SOLVER_UNSYM_TESTS],[
dnl UNSYMMETRIC tests
AT_CHECK($2 AT_PACKAGE_NAME[ --input=unsym.mm --expected=unsym-default-ans.mm --solver=$1],0,[PASS
])
AT_CHECK($2 AT_PACKAGE_NAME[ --input=unsym.mm --right-hand-side=rhs1.mm --expected=unsym-rhs1-ans.mm --solver=$1],0,[PASS
])
AT_CHECK($2 AT_PACKAGE_NAME[ --input=unsym.mm --expected=unsym-default-ans.mm -s $1],0,[PASS
])
])


m4_define([MC_SOLVER_SYM_TESTS],[
dnl SYMMETRIC tests
AT_CHECK($2 AT_PACKAGE_NAME[ --input=sym.mm --expected=sym-default-ans.mm --solver=$1],0,[PASS
])
AT_CHECK($2 AT_PACKAGE_NAME[ --input=sym.mm --right-hand-side=rhs1.mm --expected=sym-rhs1-ans.mm --solver=$1],0,[PASS
])
AT_CHECK($2 AT_PACKAGE_NAME[ --input=sym.mm --expected=sym-default-ans.mm -s $1],0,[PASS
])
])


m4_define([MC_SOLVER_SYM_POSDEF_TESTS],[
dnl SYMMETRIC tests
dnl Note: numbers are big, so precision has to be reduced to get matches
AT_CHECK($2 AT_PACKAGE_NAME[ --input=sym_posdef.mm --expected=sym_posdef-default-ans.mm --solver=$1 --precision=5e-12],0,[PASS
])
AT_CHECK($2 AT_PACKAGE_NAME[ --input=sym_posdef.mm --right-hand-side=rhs1.mm --expected=sym_posdef-rhs1-ans.mm --solver=$1 --precision=5e-11],0,[PASS
])
AT_CHECK($2 AT_PACKAGE_NAME[ --input=sym_posdef.mm --expected=sym_posdef-default-ans.mm -s $1 --precision=5e-12],0,[PASS
])
dnl check for missing arguments
AT_CHECK(AT_PACKAGE_NAME[ --input=sym_posdef.mm --expected=sym_posdef-default-ans.mm -s],64,,ignore)
AT_CHECK(AT_PACKAGE_NAME[ --input=sym_posdef.mm --expected=sym_posdef-default-ans.mm --solver],64,,ignore)
])


m4_define([MC_SOLVERS_UNSYM],[
AT_SETUP([--solver $1 (unsym)])
AT_KEYWORDS([func])
MC_DATA_FILE_RHS1_MM
MC_DATA_FILE_TEST_MM
MC_DATA_FILE_ANS1_MM
MC_DATA_FILE_ANS2_MM
MC_DATA_FILE_TEST_MM_SYM
MC_DATA_FILE_ANS1_MM_SYM
MC_DATA_FILE_ANS2_MM_SYM
MC_DATA_FILE_TEST_MM_SYM_POSDEF
MC_DATA_FILE_ANS1_MM_SYM_POSDEF
MC_DATA_FILE_ANS2_MM_SYM_POSDEF
dnl TODO add more testcases: different size matrices, known results
dnl check solver gives the expected result (i.e. it is linked and configured correctly)
AT_SKIP_IF([test "x$have_$2" != "xyes"])
MC_SOLVER_UNSYM_TESTS($1,$3)
MC_SOLVER_SYM_TESTS($1,$3)
MC_SOLVER_SYM_POSDEF_TESTS($1,$3)
AT_CLEANUP
])


m4_define([MC_SOLVERS_SYM],[
AT_SETUP([--solver $1 (sym)])
AT_KEYWORDS([func])
MC_DATA_FILE_RHS1_MM
MC_DATA_FILE_TEST_MM_SYM
MC_DATA_FILE_ANS1_MM_SYM
MC_DATA_FILE_ANS2_MM_SYM
MC_DATA_FILE_TEST_MM_SYM_POSDEF
MC_DATA_FILE_ANS1_MM_SYM_POSDEF
MC_DATA_FILE_ANS2_MM_SYM_POSDEF
AT_SKIP_IF([test "x$have_$2" != "xyes"])
MC_SOLVER_SYM_TESTS($1,$3)
MC_SOLVER_SYM_POSDEF_TESTS($1,$3)
dnl TODO test clean failures for unsupported types  (unsym, etc)
AT_CLEANUP
])

m4_define([MC_SOLVERS_SYM_POSDEF],[
AT_SETUP([--solver $1 (sym-posdef)])
AT_KEYWORDS([func])
MC_DATA_FILE_TEST_MM_SYM_POSDEF
MC_DATA_FILE_RHS1_MM
MC_DATA_FILE_ANS1_MM_SYM_POSDEF
MC_DATA_FILE_ANS2_MM_SYM_POSDEF
AT_SKIP_IF([test "x$have_$2" != "xyes"])
MC_SOLVER_SYM_POSDEF_TESTS($1,$3)
dnl TODO test clean failures for unsupported types  (unsym, etc)
AT_CLEANUP
])

MC_SOLVERS_UNSYM([umfpack],[umfpack])
MC_SOLVERS_UNSYM([mumps],[mumps])
MC_SOLVERS_UNSYM([taucs],[taucs])
MC_SOLVERS_UNSYM([superlu],[superlu_dist])
MC_SOLVERS_UNSYM([pardiso],[pardiso])
MC_SOLVERS_UNSYM([wsmp],[wsmp],[WSMPLICPATH=~])
dnl Note: cholmod is symmetric positive definite matrices ONLY
dnl posdef only?
MC_SOLVERS_SYM_POSDEF([cholmod],[cholmod])

