#! /bin/sh

# select implimentations
MPI="openmpi" # mpich2 or mpich1 or openmpi or local or skip
BLAS="netlib" # netlib or atlas or local
CBLAS="netlib"
LAPACK="netlib" # netlib or local
METIS="parmetis" # parmetis or metis -- metis is required by cholmod

#PARALLEL_MAKE_DISABLED="yes" # force make to use a single core for compiling

# select versions
# toolkits
MPICH2_MPI_VER="1.2.1p1"
MPICH1_MPI_VER="1.2.7p1"
OPENMPI_MPI_VER="1.4.3"
CILK_VER="5.4.6"
ATLAS_BLAS_VER=3.8.3 #latest stable
LAPACK_VER=3.3.0
# orderings
AMD_VER=2.2.1
CAMD_VER=2.2.1
CCOLAMD_VER=2.7.2 # required by CHOLMOD
COLAMD_VER=2.7.2
  UFPACK_VER=3.5.0
PARMETIS_VER=3.1.1
METIS_VER=4.0
SCOTCH_VER="5.1.10b"
CHOLMOD_VER=1.7.1 # can use Metis-4
# solvers
MUMPS_VER=4.9.2
# Note: no versionable downloads for netlib BLAS, ScaLAPACK
UMFPACK_VER=5.5.0
TAUCS_VER=2.2

# necessary functions
function err() {
  echo "ERROR: ${1} - ${2}"
  exit 1
}

function info() {
  echo "* $*"
}

function help() {
  echo "$(basename $0) [options]"
  echo "  all: blas lapack blacs scalapack amd camd ccolamd colamd metis scotch cholmod mumps umfpack pardiso wsmp taucs bebop"
  echo "  nopar - parallel make is disabled"
  echo "  clean - remove build directories"
  echo "  distclean - clean + remove generated files too"
}

S=${PWD}
MACHINE=$(gcc -dumpmachine)
INSTALL_BASE_DIR=${PWD}/${MACHINE}
DEP_DIRS="blas blacs lapack mpi mumps scalapack amd ccolamd camd cholmod colamd metis scotch umfpack bebop"

[ $# -eq 0 ] && help && exit 2

while [ $# != 0 ]; do
  case $1 in
    "mpi") MPI_BUILD=1;;
    "cilk") CILK=1;;
    "blas") BLAS_BUILD=1;;
    "cblas") CBLAS_BUILD=1;;
    "lapack") LAPACK_BUILD=1;;
    "blacs") BLACS=1;;
    "scalapack") SCALAPACK=1;;
    "amd") AMD=1;;
    "camd") CAMD=1;;
    "ccolamd") CCOLAMD=1;;
    "colamd") COLAMD=1;;
    "metis") METIS_BUILD=1;;
    "scotch") SCOTCH=1;;
    "cholmod") CHOLMOD=1;;
    "mumps") MUMPS=1;;
    "umfpack") UMFPACK=1;;
    "pardiso") PARDISO=1;;
    "wsmp") WSMP_BUILD=1;;
    "taucs") TAUCS=1;;
    "bebop") BEBOP=1;;
    "nopar") PARALLEL_MAKE_DISABLED=yes;;
    "clean") echo "cleaning..." && rm -rf ${DEP_DIRS} && exit 0;;
    "distclean") echo "cleaning..." && rm -rf ${DEP_DIRS} && rm -rf ${INSTALL_BASE_DIR} && exit 0;;
    *) help && err "options" "unrecognized option '$1'";;
  esac
  shift;
done
if [[ -n $ALL ]]; then
  MPI_BUILD=1
  CILK=1
  BLAS_BUILD=1
  CBLAS_BUILD=1
  LAPACK_BUILD=1
  BLACS=1
  SCALAPACK=1
  AMD=1
  CAMD=1
  CCOLAMD=1
  COLAMD=1
  METIS_BUILD=1
  SCOTCH=1
  CHOLMOD=1
  MUMPS=1
  UMFPACK=1
  PARDISO=1
  WSMP_BUILD=1
  TAUCS=1
  BEBOP=1
fi

# dependencies
[[ -n $TAUCS ]] && CILK_REQUIRED=1 && CBLAS_REQUIRED=1

# some notes on dynamic library tools:
# ldd lib.so will show what libraries (and where they are) that a .so depends upon
# ldd -u -r -d lib.so will check that all the necessary symbols can be found
# gcc -shared *.so -Wl,-rpath,${IPATH} -o lib.so will add ${IPATH} as if LD_LIBRARY_PATH was set, so the .so can find its dependancies if they aren't installed in the standard locations
# nm lib.so/a will show the symbols included in a library
# readelf -a lib.so |grep RPATH will show what the rpath is set to


# convert static library .a to dynamic lib .so
# Note: compile requires -fPIC to be relocatable
# a2so <path/static_lib.a>
function a2so() {
  I=$1
  F=$(basename $I)
  D=$(dirname $I)
  mkdir $F-d
  cp $I $F-d/
  cd $F-d
  ar -x $F
  O=$D/${F/.a/.so}
  gcc -shared *.o -Wl,-rpath,${D} $* -o $O
  [ $(LD_LIBRARY_PATH="$D:${LD_LIBRARY_PATH}" ldd -r -d -u $O 2>&1 | wc -l) != "2" ] && LD_LIBRARY_PATH="$D:${LD_LIBRARY_PATH}" ldd -r -d -u $O
  cd - > /dev/null
  rm -rf $F-d
}

# get_and_unpack <dest> <src_url>
function get_and_unpack() {
  D=$1
  R=$2
  DL=dl
  cd ${S}
  F=$(basename $R)
  [ ! -f ${DL}/${F} ] && info "  Fetching $F" && wget --directory-prefix=${DL} ${R} &> /dev/null
  # if the version/selection has changed, clear it out
  mkdir ${D} &> /dev/null
  info "  Extracting $F" && tar zxvf ${DL}/${F} -C ${D} &> /dev/null
}

# setup
info "Started $(date)"
TIC=$(date +%s)

mkdir -p ${INSTALL_BASE_DIR}/lib
mkdir -p ${INSTALL_BASE_DIR}/include
mkdir -p ${INSTALL_BASE_DIR}/bin
INSTALL_LIB_DIR=${INSTALL_BASE_DIR}/lib
INSTALL_INC_DIR=${INSTALL_BASE_DIR}/include
INSTALL_BIN_DIR=${INSTALL_BASE_DIR}/bin


# determine parallel make capacity
if [[ -n ${PARALLEL_MAKE_DISABLED} ]]; then
  info "Parallel make disabled"
  MAKE="make"
else
  NCPU=$(grep "cpu cores" /proc/cpuinfo  |head -1 | cut -d ' ' -f 3)
  info "Detected ${NCPU} cores for compile."
  let NCPU_P1=${NCPU}+1
  MAKE="make -j${NCPU_P1}"
fi


# TODO ?? does whatever version of gcc support openmp
# TODO ?? OMP_NUM_THREADS is passed in by mpirun/exec -- does sqsub get this right?

# TODO are lib/include platform specific?? should be! so when running on a new platform we don't need to mess about too much!
info "== toolkits =="
if [[ -n $MPIBUILD ]]; then
  info "MPI"
  MPI_PATH=${INSTALL_BASE_DIR}
  if [[ ! -d ${S}/mpi || ${S}/mpi -nt ${INSTALL_LIB_DIR} ]]; then
    cd ${S}
    case ${MPI} in
      "mpich2" )
        info " ------ compile is broken somewhere..."
        get_and_unpack mpi http://www.mcs.anl.gov/research/projects/mpich2/downloads/tarballs/${MPICH2_MPI_VER}/mpich2-${MPICH2_MPI_VER}.tar.gz
        cd ${S}/mpi/mpich2-${MPICH2_MPI_VER} || err mpi "wrong dir"
        mkdir build-${MACHINE} &> /dev/null # build dir
        BUILD_DIR=${S}/mpi/mpich2-${MPICH2_MPI_VER}/build-${MACHINE}
        cd ${BUILD_DIR}
        # configure options:
        # --enable-fast=O3 : production, non-testing programs
        # --enable-sharedlibs=gcc
        # --with-pm=mpd:gforker:hydra : process manager to build (all three)
        # --with-java=/opt/jdk1.6.0 : path to java for debug/perf tools (Jumpshot)
        info "  Configure"
        ../configure --prefix=${INSTALL_BASE_DIR} --enable-fast=O3 || err ${MPI} "config failed"
        # Note: if build fails, add VERBOSE=1 below
        info "  Build"
        ${MAKE} || err ${MPI} "make failed"
        info "  install"
        ${MAKE} install || err ${MPI} "install failed"
        # TODO need to convert to .a -> .so (libtool!)
        # Note: need "bin" in the path so we can get at mpd, mpicc, mpiexec, mpirun
        MPI_PATH=${INSTALL_BASE_DIR}
      ;;
      # TODO openmpi -- Something w/include files that BLACS doesn't like: mpif-common.h
      "mpich1" )
        info " ------ compile is broken somewhere..."
        get_and_unpack mpi ftp://ftp.mcs.anl.gov/pub/mpi/mpich-${MPICH1_MPI_VER}.tar.gz
        cd ${S}/mpi/mpich-${MPICH1_MPI_VER} || err mpi "wrong dir"
        mkdir build-${MACHINE} &> /dev/null # build dir
        BUILD_DIR=${S}/mpi/mpich-${MPICH1_MPI_VER}/build-${MACHINE}
        cd ${BUILD_DIR}
        info "  Configure"
        ../configure --prefix=${INSTALL_BASE_DIR} --enable-fast=O3 --enable-sharedlib  &> /dev/null || err ${MPI} "config failed"
        # Note: if build fails, add VERBOSE=1 below
        info "  build"
        ${MAKE} &> /dev/null || err ${MPI} "make failed"
        info "  install"
        ${MAKE} install &> /dev/null || err ${MPI} "install failed"
        # TODO need to convert to .a -> .so (libtool!)
        # Note: need "bin" in the path so we can get at mpd, mpicc, mpiexec, mpirun
        MPI_PATH=${INSTALL_BASE_DIR}
      ;;
      "openmpi" )
        get_and_unpack mpi http://www.open-mpi.org/software/ompi/v1.4/downloads/openmpi-${OPENMPI_MPI_VER}.tar.gz
        cd ${S}/mpi/openmpi-${OPENMPI_MPI_VER} || err mpi "wrong dir"
        mkdir build-${MACHINE} &> /dev/null # build dir
        BUILD_DIR=${S}/mpi/openmpi-${OPENMPI_MPI_VER}/build-${MACHINE}
        cd ${BUILD_DIR}
        info "  Configure"
        ../configure --prefix=${INSTALL_BASE_DIR} &> /dev/null || err ${MPI} "config failed"
        # Note: if build fails, add VERBOSE=1 below
        info "  build"
        ${MAKE} &> /dev/null || err ${MPI} "make failed"
        info "  install"
        ${MAKE} install &> /dev/null || err ${MPI} "install failed"
        # Note: need "bin" in the path so we can get at mpd, mpicc, mpiexec, mpirun
        MPI_PATH=${INSTALL_BASE_DIR}
      ;;
      * )
        err ${MPI} "build/install not yet implemented"
      ;;
    esac
  else
    info "  up-to-date"
  fi
fi
# find mpi install dir, prefer local install
if [[ -f ${INSTALL_BASE_DIR}/bin/mpirun ]]; then
  MPI_PATH=${INSTALL_BASE_DIR}
else
  MPI_PATH=$(dirname $(dirname $(which mpirun)))
fi
${MPI_PATH}/bin/mpirun -V 2>&1 | head -1 || err ${MPI}-skipped "missing mpirun"
MPI_DLIB="-L${MPI_PATH}/lib -lmpi"
[[ ${MPI_PATH} =~ "/usr" ]] && MPI_DLIB="-lmpi" # skip the rpath if its in the default location
MPI_INC=${MPI_PATH}/include
MPICC=${MPI_PATH}/bin/mpicc
MPIF77=${MPI_PATH}/bin/mpif77
O=$($MPI_PATH/bin/mpirun -V 2>&1 | head -1)
info "  Using MPI: ${O}"
# need this for BLACS openmpi fix
[[ ${O} =~ "Open MPI" ]] && MPI="openmpi" && info "    setting MPI variable to match: ${MPI}"
info "  using ${MPI_PATH}/lib/libmpi.so"



if [[ -n $CILK ]]; then
  info "CILK"
  cd ${S}
  rm -rf ${S}/taucs
  get_and_unpack taucs http://www.tau.ac.il/~stoledo/taucs/$TAUCS_VER/taucs.tgz
  cd ${S}/taucs
  info "  configure"
  C=${S}/taucs/config/linux.mk
#  LIBS = $(LIBLAPACK) $(LIBBLAS) $(LIBMETIS) $(LIBF77) $(LIBC)
  sed -i "s/^LIBBLAS.*/LIBBLAS = ${BLAS_DLIB//\//\\/}/" $C
  sed -i "s/^LIBLAPACK.*/LIBLAPACK = ${LAPACK_DLIB//\//\\/}/" $C
  sed -i "s/^LIBMETIS.*/LIBMETIS = ${METIS_DLIB//\//\\/}/" $C
#  sed -i "s/^LIBF77.*/LIBF77 = /" $C # TODO
  info "  build"
  ./configure
  make
fi
if [[ -n $CILK_REQUIRED ]]; then
  info "CILK TODO for TAUCS"
fi

# matrix tools:
# get blas (atlas, netlib, goto, mkl, acml, parblas)
#   -- which are openMP? atlas -- need to disable or messes up scheduling??
if [[ -n $BLAS_BUILD ]]; then
  info "BLAS"
  BLAS_LIB=${INSTALL_LIB_DIR}/libblas.a
  if [[ ! -d ${S}/blas || ${S}/blas -nt ${INSTALL_LIB_DIR} ]]; then
    cd ${S}
    case ${BLAS} in
      "atlas" )
        get_and_unpack blas http://sourceforge.net/projects/math-atlas/files/Stable/${ATLAS_BLAS_VER}/atlas${ATLAS_BLAS_VER}.tar.gz
        cd ${S}/blas/atlas-${ATLAS_BLAS_VER} || err blas "wrong dir"
        mkdir build-${MACHINE} # build dir
        BUILD_DIR=${S}/blas/atlas-${ATLAS_BLAS_VER}/build-${MACHINE}
        cd ${BUILD_DIR}
     #TODO   # turn off throttling
        #/usr/bin/cpufreq-selector -g performance
        #cp /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor \
        #      /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor
        # OR disable throttling check: ./configure -Si cputhrchk 0
        #../configure  -b 64 -D c -DPentiumCPS=2400 --prefix=/home/whaley/lib/atlas
        # TODO config options
        info "  configure"
        ../configure  -b 64 -D c --prefix=${INSTALL_LIB_DIR}
        info "  build"
        ${MAKE} build || err blas "build failed"
        info "  check"
        ${MAKE} check || err blas "check failed"
        info "  time"
        ${MAKE} time  || err blas "time failed"
        info " install"
        ${MAKE} install || err blas "install failed"
      ;;
      "netlib" )
        get_and_unpack blas http://www.netlib.org/blas/blas.tgz
        cd ${S}/blas/BLAS
        sed -i s/_LINUX/-${MACHINE}/ make.inc
        sed -i s/g77/gfortran/ make.inc
        sed -i "s/\(^OPTS *=\) .*/\1 -O3 -fPIC/" make.inc
        info "  build"
        ${MAKE} all &> /dev/null || err blas "build failed"
        cp blas-${MACHINE}.a  ${INSTALL_LIB_DIR}/libblas.a
        a2so ${INSTALL_LIB_DIR}/libblas.a -lgfortran -lm
        BLAS_LIB=${INSTALL_LIB_DIR}/libblas.a
      ;;
      *) err ${BLAS} "bad blas choice";;
    esac
    for i in ${BLAS_LIB}; do
      [ ! -f ${i} ] && err blas "missing lib ${BLAS_LIB}"
    done
  else
    info "  up-to-date"
  fi
fi
# find blas install dir, prefer local install
if [[ -f ${INSTALL_BASE_DIR}/lib/libblas.so ]]; then
  BLAS_PATH=${INSTALL_BASE_DIR}
else
  BLAS_PATH=/usr
fi
[[ ! -f ${BLAS_PATH}/lib/libblas.so ]] && err blas "can't find libblas.so at ${BLAS_PATH}"
BLAS_DLIB="-L${BLAS_PATH}/lib -lblas"
info "  using ${BLAS_PATH}/lib/libblas.so"


# if [[ -n $CBLAS_BUILD ]]; then
#   info "cBLAS"
#   CBLAS_LIB=${INSTALL_LIB_DIR}/libcblas.a
#   cd ${S}
#   case ${CBLAS} in
#     "netlib" )
#       get_and_unpack cblas http://www.netlib.org/cblas/cblas.tgz
#       cd ${S}/cblas/CBLAS
#       sed -i s/_LINUX/-${MACHINE}/ make.inc
#       sed -i s/g77/gfortran/ make.inc
#       sed -i "s/\(^OPTS *=\) .*/\1 -O3 -fPIC/" make.inc
#       info "  build"
#       ${MAKE} all &> /dev/null || err blas "build failed"
#       cp cblas-${MACHINE}.a  ${INSTALL_LIB_DIR}/libcblas.a
#       a2so ${INSTALL_LIB_DIR}/libcblas.a -lgfortran -lm
#     ;;
#     *) err cblas "bad cblas choice: ${CBLAS}";;
#   esac
#   for i in ${BLAS_LIB}; do
#     [ ! -f ${i} ] && err blas "missing lib ${BLAS_LIB}"
#   done
# fi
# if [[ -n $CBLAS_REQUIRED ]]; then
#   # find cblas install dir, prefer local install
#   if [[ -f ${INSTALL_BASE_DIR}/lib/libcblas.so ]]; then
#     CBLAS_PATH=${INSTALL_BASE_DIR}
#   else
#     CBLAS_PATH=/usr
#   fi
#   [[ ! -f ${CBLAS_PATH}/lib/libcblas.so ]] && err cblas "can't find libcblas.so at ${CBLAS_PATH}"
#   CBLAS_DLIB="-L${CBLAS_PATH}/lib -lcblas"
#   info "  using ${CBLAS_PATH}/lib/libcblas.so"
# fi


if [[ -n $LAPACK_BUILD ]]; then
  info "LAPACK"
  LAPACK_LIB=${INSTALL_LIB_DIR}/liblapack.a
  if [[ ! -d ${S}/lapack || ${S}/lapack -nt ${INSTALL_LIB_DIR} ]]; then
    cd ${S}
    case ${LAPACK} in
      "netlib" )
        get_and_unpack lapack http://www.netlib.org/lapack/lapack-${LAPACK_VER}.tgz
        # compile blas
        cd ${S}/lapack/lapack-${LAPACK_VER} || err lapack "unexpected version"
        cp INSTALL/make.inc.gfortran make.inc
        sed -i s/_LINUX/-${MACHINE}/ make.inc
        sed -i "s/\(^OPTS.*=\).*/\1 -O2 -fPIC/" make.inc
        sed -i "s/\(^NOOPT.*=\).*/\1 -O0 -fPIC/" make.inc
        sed -i "s/\(BLASLIB *=\) .*/\1 -Wl,-rpath,${BLAS_DIR//\//\\/} ${BLAS_DLIB//\//\\/}/" make.inc
        info "  build"
        ${MAKE} all > /dev/null || err lapack "build failed"
        cp lapack-${MACHINE}.a  ${INSTALL_LIB_DIR}/liblapack.a
        a2so ${INSTALL_LIB_DIR}/liblapack.a ${BLAS_DLIB} -lgfortran -lm
        LAPACK_LIB=${INSTALL_LIB_DIR}/liblapack.a
      ;;
      "local" )
        info "Assuming local version of LAPACK"
        LAPACK_LIB=/usr/lib/liblapack.a
      ;;
      *) err ${LAPACK} "bad lapack choice";;
    esac
    for i in ${LAPACK_LIB}; do
      [ ! -f ${i} ] && err lapack "missing lib ${LAPACK_LIB}"
    done
  else
    info "  up-to-date"
  fi
fi
if [[ -f ${INSTALL_BASE_DIR}/lib/liblapack.so ]]; then
  LAPACK_PATH=${INSTALL_BASE_DIR}
else
  LAPACK_PATH=/usr
fi
[[ ! -f ${LAPACK_PATH}/lib/liblapack.so ]] && err lapack "can't find liblapack.so at ${LAPACK_PATH}"
LAPACK_DLIB="-L${LAPACK_PATH} -llapack"
info "  using ${LAPACK_PATH}/lib/liblapack.so"

if [[ -n $BLACS ]]; then
  # get BLACS [ScaLAPACK communications]
  info "BLACS"
  if [[ ! -d ${S}/blacs || ${S}/blacs -nt ${INSTALL_LIB_DIR} ]]; then
    cd ${S}
    get_and_unpack blacs http://www.netlib.org/blacs/mpiblacs.tgz
    info "  patching"
    get_and_unpack blacs http://www.netlib.org/blacs/mpiblacs-patch03.tgz
    cd ${S}/blacs/BLACS
    cp BMAKES/Bmake.MPI-LINUX Bmake.inc
    # fix up makefile
    # Note: have to escape paths to make sed happy
    sed -i "s/\(F77  *=\) .*/\1 ${MPIF77//\//\\/}/" Bmake.inc
    sed -i "s/\(CC  *=\) .*/\1 ${MPICC//\//\\/}/" Bmake.inc
    sed -i "s/\(BTOPdir =\) .*/\1 ${PWD//\//\\/}/" Bmake.inc
    sed -i "s/\(PLAT =\) .*/\1 ${MACHINE}/" Bmake.inc
    sed -i "s/\(MPIdir =\) .*/\1 ${MPI_PATH//\//\\/}/" Bmake.inc
    sed -i "s/\(MPILIB =\) .*/\1 ${MPI_DLIB//\//\\/}/" Bmake.inc
    sed -i "s/\(F77NO_OPTFLAGS =\) .*/\1 -fPIC/" Bmake.inc
    sed -i "s/\(CCFLAGS.*=\) .*/\1 -O4 -fPIC/" Bmake.inc
    # from INSTALL/EXE/xintface helper program
    sed -i "s/\(INTFACE.*=\) .*/\1 -DAdd_/" Bmake.inc
    # from INSTALL/EXE/xtc_CsameF77 helper program
    # TODO when next line is uncommented F works C fails, and vice-versa for commenting it (C works, but not F)
    # TODO F version hangs on repeated sums test (xFbtest)
    sed -i "s/\(TRANSCOMM.*=\) .*/\1 -DUseMpi2/" Bmake.inc
    #sed -i "s/\(TRANSCOMM.*=\) .*/\1 /" Bmake.inc
    #sed -i "s/\(WHATMPI.*=\) .*/\1 -DUseCMpi/" Bmake.inc
    # for openmpi, must fix for mpif.h
    info "    MPI is ${MPI}"
    if [ ${MPI} == "openmpi" ]; then
      sed -i 's/ln -s $(MPIINCdir)\/mpif.h mpif.h/ln -s $(MPIINCdir)\/mpif*.h ./' SRC/MPI/Makefile
      sed -i 's/mpif.h/mpif*.h/' SRC/MPI/Makefile
    fi
    info "  build"
    ${MAKE} mpi &> /dev/null || err blacs "build failed"
    for i in blacsCinit blacsF77init blacs; do # rename
      cp LIB/${i}_MPI-${MACHINE}-0.a  ${INSTALL_LIB_DIR}/libmpi${i}.a
    done
    # Note: blacs is stupid - try and fix the broken circular dependancies w/in
    mkdir t
    cd t
    cp ${INSTALL_LIB_DIR}/libmpiblacsCinit.a .
    cp ${INSTALL_LIB_DIR}/libmpiblacsF77init.a .
    cp ${INSTALL_LIB_DIR}/libmpiblacs.a .
    ar x libmpiblacsF77init.a
    ar x libmpiblacs.a
    ar x libmpiblacsF77init.a
    for i in *.C; do
      mv $i ${i/.C/.oo}
    done
    gcc -shared *.o *.oo -Wl,-rpath,${INSTALL_LIB_DIR} -o libblacs-mpi-f77.so ${MPI_DLIB} -lmpi_f77
    mv libblacs-mpi-f77.so ${INSTALL_LIB_DIR}/
    rm *.o
    ar x libmpiblacsCinit.a
    ar x libmpiblacs.a
    ar x libmpiblacsCinit.a
    for i in *.C; do
      mv $i ${i/.C/.oo}
    done
    gcc -shared *.o *.oo -Wl,-rpath,${INSTALL_LIB_DIR} -o libblacs-mpi-c.so ${MPI_DLIB} -lmpi_f77
    mv libblacs-mpi-c.so ${INSTALL_LIB_DIR}/
    cd ..
    rm -rf t
  else
    info "  up-to-date"
  fi
  BLACS_PATH=${INSTALL_LIB_DIR}
  BLACS_LIB=${BLACS_PATH}/libmpiblacs.a
  BLACSF_LIB=${BLACS_PATH}/libmpiblacsF77init.a
  BLACSC_LIB=${BLACS_PATH}/libmpiblacsCinit.a
  BLACSF_DLIB="-L${BLACS_PATH} -lblacs-mpi-f77"
  BLACSC_DLIB="-L${BLACS_PATH} -lblacs-mpi-c"
fi


if [[ -n $SCALAPACK ]]; then
  # get ScaLAPACK
  # Note: ScaLAPACK breaks on parallel build
  MAKE_SAVE=${MAKE}
  MAKE="make"

  info "ScaLAPACK"
  if [[ ! -d ${S}/scalapack || ${S}/scalapack -nt ${INSTALL_LIB_DIR} ]]; then
    cd ${S}
    get_and_unpack scalapack http://www.netlib.org/scalapack/scalapack.tgz
    # compile ScaLAPACK
    cd ${S}/scalapack/scalapack-1.8.0 || err scalapack "unexpected version"
    cp INSTALL/SLmake.LINUX SLmake.inc
    sed -i "s/\(^home *=\) .*/\1 ${PWD//\//\\/}/" SLmake.inc
    sed -i "s/\(^PLAT *=\) .*/\1 ${MACHINE}/" SLmake.inc
    sed -i "s/\(^BLACSdir *=\) .*/\1 ${BLACS_PATH//\//\\/}/" SLmake.inc
    sed -i "s/\(^SMPLIB *=\) .*/\1 ${MPI_DLIB//\//\\/}/" SLmake.inc
    sed -i "s/-p4//" SLmake.inc # fix BLACS library names
      #TODO and convert from .a -> .so?
    sed -i "s/mpif77/${MPI_PATH//\//\\/}\/bin\/mpif77/" SLmake.inc
    sed -i "s/mpicc/${MPI_PATH//\//\\/}\/bin\/mpicc/" SLmake.inc
    sed -i "s/\(^NOOPT.*=\) .*/\1 -fPIC/" SLmake.inc
    sed -i "s/\(^CCFLAGS.*=\) .*/\1 -O4 -fPIC/" SLmake.inc
    sed -i "s/\(^BLASLIB *=\) .*/\1 ${BLAS_DLIB//\//\\/}/" SLmake.inc
    sed -i "s/\(^LAPACKLIB *=\) .*/\1 ${LAPACK_DLIB//\//\\/}/" SLmake.inc
    sed -i "s/\(^BLACSFINIT *=\) .*/\1 ${BLACSF_DLIB//\//\\/}/" SLmake.inc
    sed -i "s/\(^BLACSCINIT *=\) .*/\1 ${BLACSC_DLIB//\//\\/}/" SLmake.inc
    sed -i "s/\(^BLACSLIB *=\) .*/\1 /" SLmake.inc
    sed -i "s/\(^CDEFS.*=\) .*/\1 -DAdd_ -DNO_IEEE \$(USEMPI)/" SLmake.inc
    info "  build"
    ${MAKE} lib > /dev/null || err scalapack "build failed"
    cp libscalapack.a  ${INSTALL_LIB_DIR}
    a2so ${INSTALL_LIB_DIR}/libscalapack.a ${LAPACK_DLIB} ${BLAS_DLIB} ${BLACSC_DLIB} -lgfortran -lm
  else
    info "  up-to-date"
  fi
  SCALAPACK_LIB=${INSTALL_LIB_DIR}/libscalapack.a
  SCALAPACK_DLIB="-L${INSTALL_LIB_DIR} -lscalapack"

  MAKE=${MAKE_SAVE}
fi


# orderings:
info "== orderings =="

if [[ -n $AMD ]]; then
  info "AMD"
  if [[ ! -d ${S}/amd || ${S}/amd -nt ${INSTALL_LIB_DIR} ]]; then
    get_and_unpack amd http://www.cise.ufl.edu/research/sparse/amd/AMD-${AMD_VER}.tar.gz
    get_and_unpack amd http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz
    cd ${S}/amd/AMD || err amd "bad dir"
    echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
    sed -i '/CC/d' ../UFconfig/UFconfig.mk
    info "  build"
    ${MAKE} lib &> /dev/null || err amd "build failed"
    cp Include/amd.h ${INSTALL_INC_DIR}/
    cp Include/amd_internal.h ${INSTALL_INC_DIR}/
    cp Lib/libamd.a  ${INSTALL_LIB_DIR}/
    a2so ${INSTALL_LIB_DIR}/libamd.a -lm
  else
    info "  up-to-date"
  fi
  AMD_DLIB="-L${INSTALL_LIB_DIR} -lamd"

  info "CAMD"
  if [[ ! -d ${S}/camd || ${S}/camd -nt ${INSTALL_LIB_DIR} ]]; then
    get_and_unpack camd http://www.cise.ufl.edu/research/sparse/camd/CAMD-${CAMD_VER}.tar.gz
    get_and_unpack camd http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz
    cd ${S}/camd/CAMD || err camd "bad dir"
    echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
    sed -i '/CC/d' ../UFconfig/UFconfig.mk
    info "  build"
    ${MAKE} lib &> /dev/null || err camd "build failed"
    cp Include/camd.h ${INSTALL_INC_DIR}/
    cp Lib/libcamd.a  ${INSTALL_LIB_DIR}/
    a2so ${INSTALL_LIB_DIR}/libcamd.a -lm
  else
    info "  up-to-date"
  fi
  CAMD_DLIB="-L${INSTALL_LIB_DIR} -lcamd"
fi

if [[ -n $CCOLAMD ]]; then
  info "CCOLAMD"
  if [[ ! -d ${S}/ccolamd || ${S}/ccolamd -nt ${INSTALL_LIB_DIR} ]]; then
    get_and_unpack ccolamd http://www.cise.ufl.edu/research/sparse/ccolamd/CCOLAMD-${CCOLAMD_VER}.tar.gz
    get_and_unpack ccolamd http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz
    cd ${S}/ccolamd/CCOLAMD || err ccolamd "bad dir"
    echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
    sed -i '/CC/d' ../UFconfig/UFconfig.mk
    info "  build"
    ${MAKE} lib &> /dev/null || err ccolamd "build failed"
    cp Include/ccolamd.h ${INSTALL_INC_DIR}/
    cp Lib/libccolamd.a  ${INSTALL_LIB_DIR}/
    a2so ${INSTALL_LIB_DIR}/libccolamd.a -lm
  else
    info "  up-to-date"
  fi
  CCOLAMD_DLIB="-L${INSTALL_LIB_DIR} -lccolamd"
fi

if [[ -n $COLAMD ]]; then
  info "COLAMD"
  if [[ ! -d ${S}/colamd || ${S}/colamd -nt ${INSTALL_LIB_DIR} ]]; then
    get_and_unpack colamd http://www.cise.ufl.edu/research/sparse/colamd/COLAMD-${COLAMD_VER}.tar.gz
    get_and_unpack colamd http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz
    cd ${S}/colamd/COLAMD || err colamd "bad dir"
    echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
    sed -i '/CC/d' ../UFconfig/UFconfig.mk
    info "  build"
    ${MAKE} lib &> /dev/null || err colamd "build failed"
    cp Include/colamd.h ${INSTALL_INC_DIR}/
    cp Lib/libcolamd.a  ${INSTALL_LIB_DIR}/
    a2so ${INSTALL_LIB_DIR}/libcolamd.a -lm
  else
    info "  up-to-date"
  fi
  COLAMD_DLIB="-L${INSTALL_LIB_DIR} -lcolamd"
fi

if [[ -n $METIS_BUILD ]]; then
  case ${METIS} in
    "parmetis" )
      info "ParMETIS"
      if [[ ! -d ${S}/metis || ${S}/metis -nt ${INSTALL_LIB_DIR} ]]; then
        get_and_unpack metis http://glaros.dtc.umn.edu/gkhome/fetch/sw/parmetis/ParMetis-${PARMETIS_VER}.tar.gz
        cd ${S}/metis/ParMetis-${PARMETIS_VER} || err metis "bad dir"
        sed -i "s/\(^CC *=\) .*/\1 ${MPICC//\//\\/}/" Makefile.in
        sed -i "s/\(^COPTIONS *= \).*/\1 -DNDEBUG -fPIC/" Makefile.in
        info "  build"
        ${MAKE} &> /dev/null || err "build failed"
        cp parmetis.h     ${INSTALL_INC_DIR}/
        for i in libmetis.a libparmetis.a; do
  	cp ${i} ${INSTALL_LIB_DIR}/
        done
        a2so ${INSTALL_LIB_DIR}/libmetis.a -lm
        a2so ${INSTALL_LIB_DIR}/libparmetis.a -L${INSTALL_LIB_DIR} -lmetis ${MPI_DLIB}
      else
        info "  up-to-date"
      fi
    ;;
    "metis" )
      info "METIS"
      if [[ ! -d ${S}/metis || ${S}/metis -nt ${INSTALL_LIB_DIR} ]]; then
        get_and_unpack metis http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/metis-${METIS_VER}.tar.gz
        cd ${S}/metis/metis-${METIS_VER} || err metis "bad dir"
        sed -i "s/\(^COPTIONS *= \).*/\1 -DNDEBUG -fPIC/" Makefile.in
        sed -i '/CC/d' Makefile.in
        # for some reason metis redefines log2 -- its in glibc
        sed -i "s/log2\([^_]\)/log2_local\1/g" $(grep -lr log2 .)
        sed -i "s/log2\$/log2_local/g" $(grep -lr log2 .)
        info "  build"
        ${MAKE} &> /dev/null || err metis "build failed"
        cp libmetis.a ${INSTALL_LIB_DIR}/
        a2so ${INSTALL_LIB_DIR}/libmetis.a -lm
      else
        info "  up-to-date"
      fi
    ;;
    * ) err metis "bad selection - ${METIS}";;
  esac
fi
# find blas install dir, prefer local install
if [[ -f ${INSTALL_BASE_DIR}/lib/lib${METIS}.so ]]; then
  METIS_PATH=${INSTALL_BASE_DIR}
else
  METIS_PATH=/usr
fi
[[ ! -f ${METIS_PATH}/lib/lib${METIS}.so ]] && err metis "can't find lib${METIS}.so at ${METIS_PATH}"
METIS_DLIB="-L${METIS_PATH}/lib -l${METIS}"
info "  using ${METIS_PATH}/lib/lib${METIS}.so"

if [[ -n $SCOTCH ]]; then
  # Note: parallel make broken for esmumps releases
  info "pt-SCOTCH/SCOTCH"
  if [[ ! -d ${S}/scotch || ${S}/scotch -nt ${INSTALL_LIB_DIR} ]]; then
    get_and_unpack scotch https://gforge.inria.fr/frs/download.php/27584/scotch_${SCOTCH_VER}_esmumps.tar.gz
    cd ${S}/scotch/scotch_${SCOTCH_VER}_esmumps || err scotch "bad dir"
    cd src
    cp Make.inc/Makefile.inc.x86-64_pc_linux2 Makefile.inc
    sed -i "s/\(^CFLAGS.*= *-O3\)/\1 -fPIC -I${MPI_INC//\//\\/}/" Makefile.inc
    sed -i "s/\(^CCP.*=\).*/\1 ${MPICC//\//\\/}/" Makefile.inc
    info "  build"
    ${MAKE} scotch &> /dev/null || err scotch "scotch build failed"
    MAKE_SAVE=${MAKE}
    MAKE=make
    ${MAKE} ptscotch &> /dev/null || err scotch "ptscotch build failed"
    MAKE=${MAKE_SAVE}
    info "  install"
    ${MAKE} prefix=${INSTALL_BASE_DIR} install &> /dev/null || err scotch "install failed"
    cp ../lib/*mumps.a ${INSTALL_LIB_DIR}/
    a2so ${INSTALL_LIB_DIR}/libscotcherr.a
    a2so ${INSTALL_LIB_DIR}/libscotch.a   -L${INSTALL_LIB_DIR} -lscotcherr -lz -lrt -lpthread -lm
    a2so ${INSTALL_LIB_DIR}/libptscotcherr.a ${MPI_DLIB}
    a2so ${INSTALL_LIB_DIR}/libptscotch.a -L${INSTALL_LIB_DIR} -lptscotcherr ${MPI_DLIB} -lz
    a2so ${INSTALL_LIB_DIR}/libscotchmetis.a -L${INSTALL_LIB_DIR} -lscotch
    a2so ${INSTALL_LIB_DIR}/libesmumps.a   -L${INSTALL_LIB_DIR} -lscotch
    a2so ${INSTALL_LIB_DIR}/libptesmumps.a -L${INSTALL_LIB_DIR} -lptscotch
  else
    info "  up-to-date"
  fi
  SCOTCH_DLIB="-L${INSTALL_LIB_DIR} -lscotch -lesmumps"
  PTSCOTCH_DLIB="-L${INSTALL_LIB_DIR} -lptscotch -lptesmumps"
fi

if [[ -n $CHOLMOD ]]; then
  info "CHOLMOD"
  if [[ ! -d ${S}/cholmod || ${S}/cholmod -nt ${INSTALL_LIB_DIR} ]]; then
    get_and_unpack cholmod http://www.cise.ufl.edu/research/sparse/cholmod/CHOLMOD-${CHOLMOD_VER}.tar.gz
    get_and_unpack cholmod http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz
    info "  contains metis-${METIS_VER} (can't untangle: CHOLMOD wants internals)"
    get_and_unpack cholmod http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/metis-${METIS_VER}.tar.gz
    info "  config"
    cd ${S}/cholmod/metis-${METIS_VER}
    # for some reason metis redefines log2 -- its in glibc
    sed -i "s/log2\([^_]\)/log2_local\1/g" $(grep -lr log2 .)
    sed -i "s/log2\$/log2_local/g" $(grep -lr log2 .)
    cd ${S}/cholmod; mkdir -p AMD; cd AMD; ln -s ${INSTALL_INC_DIR} Include
    cd ${S}/cholmod; mkdir -p COLAMD; cd COLAMD; ln -s ${INSTALL_INC_DIR} Include
    cd ${S}/cholmod; mkdir -p CCOLAMD; cd CCOLAMD; ln -s ${INSTALL_INC_DIR} Include
    cd ${S}/cholmod; mkdir -p CAMD; cd CAMD; ln -s ${INSTALL_INC_DIR} Include
    cd ${S}/cholmod/CHOLMOD || err cholmod "bad dir"
    echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
    sed -i '/CC/d' ../UFconfig/UFconfig.mk
    info "  build"
    ${MAKE} library &> /dev/null || err cholmod "build failed"
    cp Include/cholmod*.h ${INSTALL_INC_DIR}/
    cp Lib/libcholmod.a  ${INSTALL_LIB_DIR}/
    a2so ${INSTALL_LIB_DIR}/libcholmod.a ${AMD_DLIB} ${CAMD_DLIB} ${METIS_DLIB} ${BLAS_DLIB} ${CCOLAMD_DLIB} ${COLAMD_DLIB} ${LAPACK_DLIB} -lm
  else
    info "  up-to-date"
  fi
  CHOLMOD_DLIB="-L${INSTALL_LIB_DIR} -lcholmod"
fi
# TODO get AMF
# Note: PORD is included in MUMPS

info "== solvers =="

if [[ -n $MUMPS ]]; then
  # get mumps
  info "MUMPS"
  if [[ ( ! -d ${S}/mumps ) || ( ${S}/mumps -nt ${INSTALL_LIB_DIR} ) ]]; then
    get_and_unpack mumps http://mumps.enseeiht.fr/MUMPS_${MUMPS_VER}.tar.gz
    # TODO currently only for INTEL
    cd ${S}/mumps/MUMPS_${MUMPS_VER}
    cp Make.inc/Makefile.INTEL.PAR ./Makefile.inc
    sed -i "s/\(^PLAT *=\) .*/\1 ${MACHINE}/" Makefile.inc
    sed -i "s/\(^CC *=\) .*/\1 ${MPICC//\//\\/}/"  Makefile.inc
    sed -i "s/\(^FC *=\) .*/\1 ${MPIF77//\//\\/}/" Makefile.inc
    sed -i "s/\(^FL *=\) .*/\1 ${MPIF77//\//\\/}/" Makefile.inc
    sed -i "s/\(^RANLIB *=\) .*/\1 ranlib/" Makefile.inc
    # libscalapack.a blacs_MPI-LINUX-0.a blacsF77init_MPI-LINUX-0.a
    sed -i "s/\(^SCALAP *=\) .*/\1 ${SCALAPACK_DLIB//\//\\/} ${BLACSF_DLIB//\//\\/}/" Makefile.inc
    sed -i "s/\(^INCPAR *=\) .*/\1 -I${INSTALL_INC_DIR//\//\\/} -I${MPI_INC//\//\\/}/" Makefile.inc
    # -llammpio -llamf77mpi -lmpi -llam
    sed -i "s/\(^LIBPAR *=\) .*/\1 \$(SCALAP) -L${INSTALL_LIB_DIR//\//\\/} -lutil -ldl -lpthread/" Makefile.inc
    sed -i "s/\(^LIBBLAS *=\) .*/\1 -L${BLAS_DLIB//\//\\/}/" Makefile.inc

    # update for AMD, METIS/parMETIS, SCOTCH/ptSCOTCH
    sed -i "s/^#SCOTCHDIR.*/SCOTCHDIR = ${INSTALL_BASE_DIR//\//\\/}/" Makefile.inc
    sed -i "s/^#ISCOTCH/ISCOTCH/" Makefile.inc
    sed -i "s/^#LSCOTCH/LSCOTCH/" Makefile.inc

    sed -i "s/^#LMETISDIR.*/LMETISDIR = ${INSTALL_LIB_DIR//\//\\/}/" Makefile.inc
    sed -i "s/^#LMETIS/LMETIS/" Makefile.inc

    sed -i "s/^ORDERINGSF.*/ORDERINGSF = -Dscotch -Dmetis -Dpord -Dptscotch -D${METIS}/" Makefile.inc
    sed -i "s/^\(OPT.*=\) /\1 -fPIC /" Makefile.inc
    sed -i "s/^\(OPTL.*=\) /\1 -fPIC/" Makefile.inc #-nofor_main seems to break here

    # TODO configure links to dependancies, vars: LIBBLAS, SCALAP, INCPAR, LIBPAR
    # d: double precision real (default), c: complex double, s: single precision real, z: single precision complex
    info "  build"
    #${MAKE} d > /dev/null || err mumps "build failed"
    ${MAKE} s d c z &> /dev/null || err mumps "build failed"
    # install MUMPS
    for i in lib/lib?mumps.a lib/libmumps_common.a lib/libpord.a include/*.h; do
      cp $i ${INSTALL_BASE_DIR}/$i
    done
    a2so ${INSTALL_LIB_DIR}/libpord.a
    a2so ${INSTALL_LIB_DIR}/libmumps_common.a -L${INSTALL_LIB_DIR} -lpord ${METIS_DLIB} ${PTSCOTCH_DLIB} ${MPI_DLIB} -lmpi_f77 -lgfortran -lm
    for i in s d c z; do
      a2so ${INSTALL_LIB_DIR}/lib${i}mumps.a -L${INSTALL_LIB_DIR} -lmumps_common ${SCALAPACK_DLIB}
    done
  else
    info "  up-to-date"
  fi
fi

if [[ -n $UMFPACK ]]; then
  info "UMFPACK"
  if [[ ! -d ${S}/umfpack || ${S}/umfpack -nt ${INSTALL_LIB_DIR} ]]; then
    rm -rf umfpack # doing this twice breaks things, so delete any old version before starting again
    get_and_unpack umfpack http://www.cise.ufl.edu/research/sparse/umfpack/UMFPACK-${UMFPACK_VER}.tar.gz
    get_and_unpack umfpack http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz
    info "  config"
    cd ${S}/umfpack; mkdir AMD; cd AMD; ln -s ${INSTALL_INC_DIR} Include
    cd ${S}/umfpack; mkdir CCOLAMD; cd CCOLAMD; ln -s ${INSTALL_INC_DIR} Include
    cd ${S}/umfpack; mkdir CAMD; cd CAMD; ln -s ${INSTALL_INC_DIR} Include
    cd ${S}/umfpack; mkdir CHOLMOD; cd CHOLMOD; ln -s ${INSTALL_INC_DIR} Include
    cd ${S}/umfpack; mkdir metis-4.0; cd metis-4.0; ln -s ${INSTALL_INC_DIR} Lib
    cd ${S}/umfpack/UMFPACK || err amd "bad dir"
    echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
    sed -i '/CC/d' ../UFconfig/UFconfig.mk
    info "  build"
    cd ${S}/umfpack/UMFPACK/Lib
    ${MAKE} -f Makefile &> /dev/null || err umfpack "build failed"
    cd ${S}/umfpack/UMFPACK
    cp ../UFconfig/UFconfig.h ${INSTALL_INC_DIR}/
    cp Include/umfpack*.h ${INSTALL_INC_DIR}/
    cp Lib/libumfpack.a  ${INSTALL_LIB_DIR}/
    a2so ${INSTALL_LIB_DIR}/libumfpack.a ${CHOLMOD_DLIB} -lm
  else
    info "  up-to-date"
  fi
  UMFPACK_DLIB="-L${INSTALL_LIB_DIR} -lumfpack"
fi

if [[ -n $PARDISO ]]; then
  PARDISO_VER=4.1.1
  info "Pardiso ${PARDISO_VER}"
  F=${S}/dl/libpardiso411-GNU430-X86-64.so
  PARDISO_LIB=libpardiso
  if [[ ! -f ${F} ]]; then
    echo "  Need to download tar.gz from http://www.pardiso-project.org/branch (licensing required)"
  else
    [[ ! -f ${HOME}/pardiso.lic ]] && [[ ! -f ./pardiso.lic ]] && \
      echo "  Make sure license (pardiso.lic) is in home directory or working directory."
    cp ${F} ${INSTALL_LIB_DIR}/${PARDISO_LIB}-${PARDISO_VER}.so
    chmod +x ${INSTALL_LIB_DIR}/${PARDISO_LIB}-${PARDISO_VER}.so
    cd ${INSTALL_LIB_DIR}
    ln -sf ${PARDISO_LIB}-${PARDISO_VER}.so ${PARDISO_LIB}.so
    # TODO add -rpath and dependencies: blas, lapack, mpi?
  fi
fi

if [[ -n $WSMP_BUILD ]]; then
  info "WSMP"
  cd ${S}
  F=${S}/dl/wsmp-Linux64.tar.gz
  if [[ ! -f ${F} ]]; then
    echo "  Need to download tar.gz from http://www.pardiso-project.org/branch (licensing required)"
  else
    rm -rf wsmp
    tar zxvf $F > /dev/null
    cd ${S}/wsmp/wsmp-Linux64
    echo -n "*   "
    cat VERSION | head -1
    [[ ! -f ${HOME}/wsmp.lic ]] && [[ ! -f ${S}/wsmp.lic ]] && \
      cp wsmp.lic ${S}/
    LIBS="-L${INSTALL_LIB_DIR} ${BLAS_DLIB} -lmpi_f77" 
    if [[ ${MPI} == "openmpi" ]]; then
      info "  selected OpenMPI version of libpwsmp"
      cp ${S}/wsmp/wsmp-Linux64/lib/GNU/openmpi/libpwsmp64.a ${INSTALL_LIB_DIR}/libpwsmp-openmpi-64b.a
      cd ${INSTALL_LIB_DIR}
      ln -sf libpwsmp-openmpi-64b.so libpwsmp.so
    else
      info "  selected mpich2 version of libpwsmp"
      cp ${S}/wsmp/wsmp-Linux64/lib/GNU/mpi2/libpwsmp64.a ${INSTALL_LIB_DIR}/libpwsmp-mpi2-64b.a
      a2so ${INSTALL_LIB_DIR}/libpwsmp-mpi2-64b.a    ${LIBS}
      cd ${INSTALL_LIB_DIR}
      ln -sf libpwsmp-mpi2-64b.so libpwsmp.so
    fi
    info "  installed libwsmp"
    cp ${S}/wsmp/wsmp-Linux64/lib/GNU/libwsmp64.a ${INSTALL_LIB_DIR}/libwsmp-64b.a
    a2so ${INSTALL_LIB_DIR}/libwsmp-64b.a -L${INSTALL_LIB_DIR} ${BLAS_DLIB} -lpthread
    ln -sf libwsmp-64b.so libwsmp.so
  fi
fi

if [[ -n $TAUCS ]]; then
  info "TAUCS"
  cd ${S}
  rm -rf ${S}/taucs
  get_and_unpack taucs http://www.tau.ac.il/~stoledo/taucs/$TAUCS_VER/taucs.tgz
  cd ${S}/taucs
  info "  patch"
  C=${S}/taucs/config/linux.mk
  sed -i "s/^FC.*/FC = gfortran/" $C # was g77
  sed -i "s/^CFLAGS.*/CFLAGS = -O3 -fPIC -fexceptions -D_GNU_SOURCE/" $C
  sed -i "s/^FFLAGS.*/FFLAGS = -O3 -fPIC -fno-second-underscore/" $C
  sed -i "s/^LDFLAGS.*/LDFLAGS = -Wl,-rpath,${INSTALL_LIB_DIR//\//\\/}/" $C
  sed -i "s/^LIBBLAS.*/LIBBLAS = ${BLAS_DLIB//\//\\/}/" $C
  sed -i "s/^LIBLAPACK.*/LIBLAPACK = ${LAPACK_DLIB//\//\\/}/" $C
  sed -i "s/^LIBMETIS.*/LIBMETIS = ${METIS_DLIB//\//\\/}/" $C
  sed -i "s/^LIBF77.*/LIBF77 = -lgfortran/" $C # was -lg2c
#  sed -i "s/^LIBC.*/LIBC = -lm/" $C # was -lm
  # and remove a stray printf that snuck in to his code, and fix a problem with uninitialized memory (valgrind)
  cat > taucs_ooc_lu.patch <<EOF
--- a/src/taucs_ccs_ooc_lu.c    2011-03-02 03:24:02.000000000 -0500
+++ b/src/taucs_ccs_ooc_lu.c	2011-03-02 03:25:00.000000000 -0500
@@ -2390,10 +2390,12 @@
     panel_spa = (taucs_datatype*)taucs_malloc(spawidth*nrows*sizeof(taucs_datatype));
     panel_spamap = (char*)taucs_malloc(spawidth*nrows*sizeof(char) );
     assert(panel_spa && panel_spamap);
+    memset(panel_spamap, 0, spawidth*nrows*sizeof(char));
 #else
     panel_spa = (taucs_datatype**) taucs_malloc(spawidth*sizeof(taucs_datatype*));
     panel_spamap = (char**) taucs_malloc(spawidth*sizeof(char*) );
     assert(panel_spa && panel_spamap);
+    memset(panel_spamap, 0, spawidth*sizeof(char));
 #endif
   }

@@ -3936,7 +3938,7 @@

   taucs_io_read(LU, HEADER_FLAGS, 1, 1, TAUCS_INT, &flags);

-  printf("taucs_ooc_solve_lu: starting, DZSC=%d%d%d%d\n",
+  taucs_printf("taucs_ooc_solve_lu: starting, DZSC=%d%d%d%d\n",
 	 (flags & TAUCS_DOUBLE  ) != 0,
 	 (flags & TAUCS_DCOMPLEX) != 0,
 	 (flags & TAUCS_SINGLE  ) != 0,
EOF
  patch -p 1 -i taucs_ooc_lu.patch
  # TODO need to strip out amd, colamd from compile, select solvers, data types (see doc/)
  info "  configure"
  ./configure &> /dev/null || err taucs "configure failed"
  info "  build"
  ${MAKE} &> /dev/null || err taucs "make failed"
  info "  install"
  cp ${S}/taucs/lib/linux/libtaucs.a ${INSTALL_LIB_DIR}/
  a2so ${INSTALL_LIB_DIR}/libtaucs.a ${BLAS_DLIB} ${LAPACK_DLIB} ${METIS_DLIB}
  cp ${S}/taucs/build/linux/*.h ${INSTALL_INC_DIR}/
  cp ${S}/taucs/src/taucs*.h ${INSTALL_INC_DIR}/
fi

info "== I/O =="
if [[ -n $BEBOP ]]; then
  info "BeBOP Sparse Matrix Converter"
  if [[ ! -d ${S}/bebop || ${S}/bebop -nt ${INSTALL_LIB_DIR} ]]; then
    get_and_unpack bebop http://bebop.cs.berkeley.edu/smc/tarballs/bebop_make.tar.gz
    get_and_unpack bebop http://bebop.cs.berkeley.edu/smc/tarballs/bebop_util.tar.gz
    get_and_unpack bebop http://bebop.cs.berkeley.edu/smc/tarballs/sparse_matrix_converter.tar.gz
    cd ${S}/bebop/bebop_make
    sed -i "s/\(^LDFLAGS\)=.*/\1=-Wl,-rpath,${INSTALL_LIB_DIR//\//\\/}/" Makefile.include
    cd ${S}/bebop/bebop_util
    info "  build util lib"
    sed -i "s/\/dev\/random/\/dev\/urandom/" src/random_number.c # prevent blocking when not enough entropy
    make &> /dev/null || err bebop "util build failed"
    cd ${S}/bebop/sparse_matrix_converter
    info "  build sparse matrix convertor"
    make &> /dev/null || err bebop "sparse matrix convertor build failed"
    info "  install"
    cd ${S}/bebop
    for i in bebop_util sparse_matrix_converter; do
      cp ${S}/bebop/${i}/lib${i}.so ${INSTALL_LIB_DIR}/
      cp ${S}/bebop/${i}/lib${i}.a  ${INSTALL_LIB_DIR}/
    done
    cp ${S}/bebop/sparse_matrix_converter/sparse_matrix_converter ${INSTALL_BIN_DIR}/
    mkdir -p ${INSTALL_INC_DIR}/bebop/util
    mkdir -p ${INSTALL_INC_DIR}/bebop/smc
    cp ${S}/bebop/bebop_util/include/bebop/util/init.h ${INSTALL_INC_DIR}/bebop/util/
    cp ${S}/bebop/bebop_util/include/bebop/util/enumerations.h ${INSTALL_INC_DIR}/bebop/util/
    cp ${S}/bebop/sparse_matrix_converter/include/bebop/smc/*.h ${INSTALL_INC_DIR}/bebop/smc/
  else
    echo "  up-to-date"
  fi
fi

#sleep 2
touch ${INSTALL_LIB_DIR}

TOC=$(date +%s)
let DELTA=${TOC}-${TIC}
info "Finished $(date) (${DELTA}s)"  #TODO $(date --date=${DELTA} +%T))"
